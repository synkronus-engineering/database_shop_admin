create table "public"."ref_colombian_cities" (
    "id" bigint generated by default as identity not null,
    "departamento_id" bigint not null,
    "codigo" integer,
    "nombre" text
);


create table "public"."ref_colombian_states" (
    "id" bigint generated by default as identity not null,
    "nombre" text,
    "codigo" integer
);


create table "public"."ref_countries" (
    "id" bigint generated by default as identity not null,
    "nombre" character varying(300),
    "area_code" character varying(300),
    "codigo" character varying(300)
);


create table "public"."ref_generic_list_cat" (
    "id" uuid not null default uuid_generate_v4(),
    "code" text,
    "name" text,
    "description" text,
    "order_list" smallint
);


create table "public"."ref_generic_list_sub" (
    "id" uuid not null default uuid_generate_v4(),
    "generic_list_cat_id" uuid,
    "code" text,
    "name" text,
    "order_list" smallint,
    "meta" text
);


create table "public"."todos" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "task" text,
    "is_complete" boolean default false,
    "created_at" timestamp with time zone not null default timezone('utc'::text, now())
);


alter table "public"."todos" enable row level security;

create table "public"."user_profiles" (
    "id" uuid not null,
    "username" text,
    "avatar_url" text,
    "mobile_number" text,
    "first_name" text,
    "last_name" text,
    "birth_date" text,
    "updated_at" timestamp with time zone default (now() AT TIME ZONE 'utc'::text),
    "gender_id" uuid
);


alter table "public"."user_profiles" enable row level security;

CREATE UNIQUE INDEX colombian_cities_pkey ON public.ref_colombian_cities USING btree (id);

CREATE UNIQUE INDEX colombian_states_pkey ON public.ref_colombian_states USING btree (id);

CREATE UNIQUE INDEX countries_pkey ON public.ref_countries USING btree (id);

CREATE UNIQUE INDEX generic_list_cat_pkey ON public.ref_generic_list_cat USING btree (id);

CREATE UNIQUE INDEX generic_list_sub_pkey ON public.ref_generic_list_sub USING btree (id);

CREATE UNIQUE INDEX profiles_pkey ON public.user_profiles USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.user_profiles USING btree (username);

CREATE UNIQUE INDEX todos_pkey ON public.todos USING btree (id);

alter table "public"."ref_colombian_cities" add constraint "colombian_cities_pkey" PRIMARY KEY using index "colombian_cities_pkey";

alter table "public"."ref_colombian_states" add constraint "colombian_states_pkey" PRIMARY KEY using index "colombian_states_pkey";

alter table "public"."ref_countries" add constraint "countries_pkey" PRIMARY KEY using index "countries_pkey";

alter table "public"."ref_generic_list_cat" add constraint "generic_list_cat_pkey" PRIMARY KEY using index "generic_list_cat_pkey";

alter table "public"."ref_generic_list_sub" add constraint "generic_list_sub_pkey" PRIMARY KEY using index "generic_list_sub_pkey";

alter table "public"."todos" add constraint "todos_pkey" PRIMARY KEY using index "todos_pkey";

alter table "public"."user_profiles" add constraint "profiles_pkey" PRIMARY KEY using index "profiles_pkey";

alter table "public"."ref_colombian_cities" add constraint "ref_colombian_cities_departamento_id_fkey" FOREIGN KEY (departamento_id) REFERENCES ref_colombian_states(id) not valid;

alter table "public"."ref_colombian_cities" validate constraint "ref_colombian_cities_departamento_id_fkey";

alter table "public"."ref_generic_list_sub" add constraint "ref_generic_list_sub_generic_list_cat_id_fkey" FOREIGN KEY (generic_list_cat_id) REFERENCES ref_generic_list_cat(id) not valid;

alter table "public"."ref_generic_list_sub" validate constraint "ref_generic_list_sub_generic_list_cat_id_fkey";

alter table "public"."todos" add constraint "todos_task_check" CHECK ((char_length(task) > 3)) not valid;

alter table "public"."todos" validate constraint "todos_task_check";

alter table "public"."todos" add constraint "todos_user_id_fkey" FOREIGN KEY (user_id) REFERENCES user_profiles(id) ON DELETE CASCADE not valid;

alter table "public"."todos" validate constraint "todos_user_id_fkey";

alter table "public"."user_profiles" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."user_profiles" add constraint "user_profiles_gender_id_fkey" FOREIGN KEY (gender_id) REFERENCES ref_generic_list_sub(id) not valid;

alter table "public"."user_profiles" validate constraint "user_profiles_gender_id_fkey";

alter table "public"."user_profiles" add constraint "user_profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."user_profiles" validate constraint "user_profiles_id_fkey";

alter table "public"."user_profiles" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."user_profiles" validate constraint "username_length";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
DECLARE
  full_name_parts text[];
  first_name text;
  last_name text;
begin
    -- Split full_name into first_name and last_name
    full_name_parts := string_to_array(new.raw_user_meta_data->>'full_name', ' ');
    first_name := COALESCE(full_name_parts[1], 'First_name');
    last_name := COALESCE(full_name_parts[2], 'Last_name');
  insert into public.user_profiles (id, first_name, last_name, avatar_url, username)
  values (
    new.id, 
    first_name,
    last_name,
    COALESCE(new.raw_user_meta_data->>'avatar_url', ''),
    COALESCE(new.email, 'username@default.com')
  );
  return new;
end;
$function$
;

create policy "Individuals can create todos."
on "public"."todos"
as permissive
for insert
to public
with check ((auth.uid() = user_id));


create policy "Individuals can delete their own todos."
on "public"."todos"
as permissive
for delete
to public
using ((auth.uid() = user_id));


create policy "Individuals can update their own todos."
on "public"."todos"
as permissive
for update
to public
using ((auth.uid() = user_id));


create policy "Individuals can view their own todos. "
on "public"."todos"
as permissive
for select
to public
using ((auth.uid() = user_id));


create policy "Public user_profiles are viewable by everyone."
on "public"."user_profiles"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."user_profiles"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."user_profiles"
as permissive
for update
to public
using ((auth.uid() = id));


CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION handle_new_user();


